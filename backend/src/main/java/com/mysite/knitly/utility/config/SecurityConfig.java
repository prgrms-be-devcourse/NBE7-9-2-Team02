package com.mysite.knitly.utility.config;

import com.mysite.knitly.utility.handler.OAuth2FailureHandler;
import com.mysite.knitly.utility.handler.OAuth2SuccessHandler;
import com.mysite.knitly.utility.jwt.JwtAuthenticationFilter;
import com.mysite.knitly.utility.oauth.CustomOAuth2UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import com.mysite.knitly.utility.config.JsonAuthEntryPoint;        // 401 JSON
import com.mysite.knitly.utility.config.JsonAccessDeniedHandler;   // 403 JSON

import java.util.Arrays;

@Configuration
@EnableWebSecurity
@org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final CustomOAuth2UserService customOAuth2UserService;
    private final OAuth2SuccessHandler oAuth2SuccessHandler;
    private final OAuth2FailureHandler oAuth2FailureHandler;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    // 401/403ÏùÑ JSONÏúºÎ°ú ÎÇ¥Î†§Ï£ºÍ∏∞ ÏúÑÌïú Ìï∏Îì§Îü¨
    private final JsonAuthEntryPoint jsonAuthEntryPoint;
    private final JsonAccessDeniedHandler jsonAccessDeniedHandler;

    /**
     * CORS ÏÑ§Ï†ï
     * ÌîÑÎ°†Ìä∏ÏóîÎìú(localhost:3000)ÏôÄ Î∞±ÏóîÎìú(localhost:8080) Í∞Ñ ÌÜµÏã† ÌóàÏö©
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // üî• ÌóàÏö©Ìï† Ï∂úÏ≤ò (ÌîÑÎ°†Ìä∏ÏóîÎìú URL)
        configuration.setAllowedOrigins(Arrays.asList(
                "http://localhost:3000",     // Í∞úÎ∞ú ÌôòÍ≤Ω
                "http://localhost:3001",     // Í∞úÎ∞ú ÌôòÍ≤Ω (Ï∂îÍ∞Ä Ìè¨Ìä∏)
                "https://www.myapp.com"      // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω (Ï∂îÌõÑ Î≥ÄÍ≤Ω)
        ));

        // ÌóàÏö©Ìï† HTTP Î©îÏÑúÎìú
        configuration.setAllowedMethods(Arrays.asList(
                "GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"
        ));

        // ÌóàÏö©Ìï† Ìó§Îçî
        configuration.setAllowedHeaders(Arrays.asList("*"));

        // üî• Ïø†ÌÇ§ Ìè¨Ìï® ÌóàÏö© (Îß§Ïö∞ Ï§ëÏöî!)
        configuration.setAllowCredentials(true);

        // ÎÖ∏Ï∂úÌï† Ìó§Îçî (ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•)
        configuration.setExposedHeaders(Arrays.asList(
                "Authorization",
                "Set-Cookie"
        ));

        // Preflight ÏöîÏ≤≠ Ï∫êÏãú ÏãúÍ∞Ñ (1ÏãúÍ∞Ñ)
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);

        return source;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // CORS ÏÑ§Ï†ï Ï†ÅÏö©
                .cors(cors -> cors.configurationSource(corsConfigurationSource()))

                // CSRF ÎπÑÌôúÏÑ±Ìôî (JWT ÏÇ¨Ïö©)
                .csrf(csrf -> csrf.disable())

                // ÏÑ∏ÏÖò ÏÇ¨Ïö© ÏïàÌï® (Stateless)
                .sessionManagement(session ->
                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )

                // 401/403 ÏùÑ JSON ÏùëÎãµÏúºÎ°ú Í≥†Ï†ï
                .exceptionHandling(eh -> eh
                        .authenticationEntryPoint(jsonAuthEntryPoint)      // 401
                        .accessDeniedHandler(jsonAccessDeniedHandler)      // 403
                )

                // URL Î≥Ñ Í∂åÌïú ÏÑ§Ï†ï
                .authorizeHttpRequests(auth -> auth

                        // Ïª§ÎÆ§ÎãàÌã∞ Í≤åÏãúÍ∏Ä Î™©Î°ù/ÏÉÅÏÑ∏ Ï°∞ÌöåÎäî Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÌóàÏö©
                        .requestMatchers(HttpMethod.GET, "/community/posts/**").permitAll()
                        .requestMatchers(HttpMethod.GET, "/community/comments/**").permitAll()
                        // ÎåìÍ∏Ä Ï°∞Ìöå(Í≤åÏãúÍ∏Ä ÌïòÏúÑ Í≤ΩÎ°ú) Í≥µÍ∞ú: Î™©Î°ù & count Î™®Îëê Ìè¨Ìï®
                        .requestMatchers(HttpMethod.GET, "/community/posts/*/comments").permitAll()
                        .requestMatchers(HttpMethod.GET, "/community/posts/*/comments/**").permitAll()

                        // Ïª§ÎÆ§ÎãàÌã∞ "Ïì∞Í∏∞/ÏàòÏ†ï/ÏÇ≠Ï†ú"Îäî Ïù∏Ï¶ù ÌïÑÏöî
                        .requestMatchers(HttpMethod.POST,   "/community/**").authenticated()
                        .requestMatchers(HttpMethod.PUT,    "/community/**").authenticated()
                        .requestMatchers(HttpMethod.PATCH,  "/community/**").authenticated()
                        .requestMatchers(HttpMethod.DELETE, "/community/**").authenticated()

                        // ÎßàÏù¥ÌéòÏù¥ÏßÄÎäî Ï†ÑÎ∂Ä Ïù∏Ï¶ù ÌïÑÏöî
                        .requestMatchers("/mypage/**").authenticated()

                        .requestMatchers(HttpMethod.GET, "/products", "/products/**", "/users/*/products").permitAll() // ÏÉÅÌíà Î™©Î°ù API Í≥µÍ∞ú
                        .requestMatchers(HttpMethod.GET, "/home/**").permitAll() // Ìôà ÌôîÎ©¥ API Í≥µÍ∞ú
                        // Ïù∏Ï¶ù Î∂àÌïÑÏöî
                        .requestMatchers("/", "/login/**", "/oauth2/**", "/auth/refresh", "/auth/test").permitAll()

                        // JWT Ïù∏Ï¶ù ÌïÑÏöî
                        .requestMatchers("/users/**").authenticated()

                        // Swagger ÏÇ¨Ïö©
                        .requestMatchers("/swagger-ui/**", "/v3/api-docs/**", "/swagger-ui.html").permitAll()

                        // ÏóÖÎ°úÎìúÌïú Î¶¨Î∑∞ Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
                        .requestMatchers("/review/**").permitAll()

                        // ÎÇòÎ®∏ÏßÄ Î™®Îëê Ïù∏Ï¶ù ÌïÑÏöî
                        .anyRequest().authenticated()
                )

                // OAuth2 Î°úÍ∑∏Ïù∏ ÏÑ§Ï†ï
                .oauth2Login(oauth2 -> oauth2
                        .userInfoEndpoint(userInfo ->
                                userInfo.userService(customOAuth2UserService)
                        )
                        .successHandler(oAuth2SuccessHandler)
                        .failureHandler(oAuth2FailureHandler)
                )

                // JWT Ïù∏Ï¶ù ÌïÑÌÑ∞ Ï∂îÍ∞Ä
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }


}